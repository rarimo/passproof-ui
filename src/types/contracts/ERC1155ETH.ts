/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ERC1155ETH {
  export type UserDataStruct = {
    nullifier: BigNumberish;
    identityCreationTimestamp: BigNumberish;
  };

  export type UserDataStructOutput = [BigNumber, BigNumber] & {
    nullifier: BigNumber;
    identityCreationTimestamp: BigNumber;
  };

  export type TransitionDataStruct = {
    newRoot_: BytesLike;
    transitionTimestamp_: BigNumberish;
    proof: BytesLike;
  };

  export type TransitionDataStructOutput = [string, BigNumber, string] & {
    newRoot_: string;
    transitionTimestamp_: BigNumber;
    proof: string;
  };
}

export declare namespace VerifierHelper {
  export type ProofPointsStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
  };

  export type ProofPointsStructOutput = [
    [BigNumber, BigNumber],
    [[BigNumber, BigNumber], [BigNumber, BigNumber]],
    [BigNumber, BigNumber]
  ] & {
    a: [BigNumber, BigNumber];
    b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
    c: [BigNumber, BigNumber];
  };
}

export interface ERC1155ETHInterface extends utils.Interface {
  functions: {
    "IDENTITY_LIMIT()": FunctionFragment;
    "PROOF_SIGNALS_COUNT()": FunctionFragment;
    "SELECTOR()": FunctionFragment;
    "ZERO_DATE()": FunctionFragment;
    "_mintLogic(bytes32,address,uint256,(uint256,uint256),(uint256[2],uint256[2][2],uint256[2]))": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "identityProofVerifier()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isNullifierUsed(uint256)": FunctionFragment;
    "magicTokenId()": FunctionFragment;
    "mint(bytes32,address,uint256,(uint256,uint256),(uint256[2],uint256[2][2],uint256[2]))": FunctionFragment;
    "mintWithRootTransition((bytes32,uint256,bytes),address,uint256,(uint256,uint256),(uint256[2],uint256[2][2],uint256[2]))": FunctionFragment;
    "mintWithSimpleRootTransition((bytes32,uint256,bytes),address,uint256,(uint256,uint256),(uint256[2],uint256[2][2],uint256[2]))": FunctionFragment;
    "nullifiers(uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "state()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IDENTITY_LIMIT"
      | "PROOF_SIGNALS_COUNT"
      | "SELECTOR"
      | "ZERO_DATE"
      | "_mintLogic"
      | "balanceOf"
      | "balanceOfBatch"
      | "identityProofVerifier"
      | "isApprovedForAll"
      | "isNullifierUsed"
      | "magicTokenId"
      | "mint"
      | "mintWithRootTransition"
      | "mintWithSimpleRootTransition"
      | "nullifiers"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "state"
      | "supportsInterface"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "IDENTITY_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROOF_SIGNALS_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SELECTOR", values?: undefined): string;
  encodeFunctionData(functionFragment: "ZERO_DATE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_mintLogic",
    values: [
      BytesLike,
      string,
      BigNumberish,
      ERC1155ETH.UserDataStruct,
      VerifierHelper.ProofPointsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "identityProofVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isNullifierUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "magicTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      BytesLike,
      string,
      BigNumberish,
      ERC1155ETH.UserDataStruct,
      VerifierHelper.ProofPointsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithRootTransition",
    values: [
      ERC1155ETH.TransitionDataStruct,
      string,
      BigNumberish,
      ERC1155ETH.UserDataStruct,
      VerifierHelper.ProofPointsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithSimpleRootTransition",
    values: [
      ERC1155ETH.TransitionDataStruct,
      string,
      BigNumberish,
      ERC1155ETH.UserDataStruct,
      VerifierHelper.ProofPointsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nullifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "IDENTITY_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROOF_SIGNALS_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SELECTOR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ZERO_DATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_mintLogic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identityProofVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNullifierUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "magicTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithRootTransition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithSimpleRootTransition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nullifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "MagicTokenMinted(address,uint256,uint256,uint256)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MagicTokenMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface MagicTokenMintedEventObject {
  to: string;
  tokenId: BigNumber;
  value: BigNumber;
  nullifier: BigNumber;
}
export type MagicTokenMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  MagicTokenMintedEventObject
>;

export type MagicTokenMintedEventFilter =
  TypedEventFilter<MagicTokenMintedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface ERC1155ETH extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC1155ETHInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IDENTITY_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROOF_SIGNALS_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    SELECTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    ZERO_DATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    _mintLogic(
      registrationRoot_: BytesLike,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    identityProofVerifier(overrides?: CallOverrides): Promise<[string]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNullifierUsed(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    magicTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      registrationRoot_: BytesLike,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintWithRootTransition(
      transitionData_: ERC1155ETH.TransitionDataStruct,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintWithSimpleRootTransition(
      transitionData_: ERC1155ETH.TransitionDataStruct,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nullifiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    state(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  IDENTITY_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  PROOF_SIGNALS_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  SELECTOR(overrides?: CallOverrides): Promise<BigNumber>;

  ZERO_DATE(overrides?: CallOverrides): Promise<BigNumber>;

  _mintLogic(
    registrationRoot_: BytesLike,
    receiver_: string,
    currentDate_: BigNumberish,
    userData_: ERC1155ETH.UserDataStruct,
    zkPoints_: VerifierHelper.ProofPointsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  identityProofVerifier(overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNullifierUsed(
    nullifier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  magicTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    registrationRoot_: BytesLike,
    receiver_: string,
    currentDate_: BigNumberish,
    userData_: ERC1155ETH.UserDataStruct,
    zkPoints_: VerifierHelper.ProofPointsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintWithRootTransition(
    transitionData_: ERC1155ETH.TransitionDataStruct,
    receiver_: string,
    currentDate_: BigNumberish,
    userData_: ERC1155ETH.UserDataStruct,
    zkPoints_: VerifierHelper.ProofPointsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintWithSimpleRootTransition(
    transitionData_: ERC1155ETH.TransitionDataStruct,
    receiver_: string,
    currentDate_: BigNumberish,
    userData_: ERC1155ETH.UserDataStruct,
    zkPoints_: VerifierHelper.ProofPointsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nullifiers(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  state(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IDENTITY_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    PROOF_SIGNALS_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    SELECTOR(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_DATE(overrides?: CallOverrides): Promise<BigNumber>;

    _mintLogic(
      registrationRoot_: BytesLike,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    identityProofVerifier(overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNullifierUsed(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    magicTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      registrationRoot_: BytesLike,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithRootTransition(
      transitionData_: ERC1155ETH.TransitionDataStruct,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithSimpleRootTransition(
      transitionData_: ERC1155ETH.TransitionDataStruct,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    nullifiers(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    state(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "MagicTokenMinted(address,uint256,uint256,uint256)"(
      to?: string | null,
      tokenId?: BigNumberish | null,
      value?: null,
      nullifier?: null
    ): MagicTokenMintedEventFilter;
    MagicTokenMinted(
      to?: string | null,
      tokenId?: BigNumberish | null,
      value?: null,
      nullifier?: null
    ): MagicTokenMintedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;
  };

  estimateGas: {
    IDENTITY_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    PROOF_SIGNALS_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    SELECTOR(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_DATE(overrides?: CallOverrides): Promise<BigNumber>;

    _mintLogic(
      registrationRoot_: BytesLike,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identityProofVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNullifierUsed(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    magicTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      registrationRoot_: BytesLike,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintWithRootTransition(
      transitionData_: ERC1155ETH.TransitionDataStruct,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintWithSimpleRootTransition(
      transitionData_: ERC1155ETH.TransitionDataStruct,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nullifiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IDENTITY_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROOF_SIGNALS_COUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SELECTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZERO_DATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _mintLogic(
      registrationRoot_: BytesLike,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identityProofVerifier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNullifierUsed(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    magicTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      registrationRoot_: BytesLike,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintWithRootTransition(
      transitionData_: ERC1155ETH.TransitionDataStruct,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintWithSimpleRootTransition(
      transitionData_: ERC1155ETH.TransitionDataStruct,
      receiver_: string,
      currentDate_: BigNumberish,
      userData_: ERC1155ETH.UserDataStruct,
      zkPoints_: VerifierHelper.ProofPointsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nullifiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
